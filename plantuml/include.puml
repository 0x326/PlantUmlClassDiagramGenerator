@startuml
class Program {
    {static} Main(args:string[]) : int
}
enum OptionType {
    Value,
    Switch,
}
class "Dictionary`2"<T1,T2> {
}
Program o-> "options<string,OptionType>" "Dictionary`2"
Program +-- OptionType
enum Accessibilities {
    None= 0x0000,
    Private= 0x0001,
    Protected= 0x0002,
    Internal= 0x0004,
    ProtectedInternal= 0x0008,
    Public= 0x0010,
}
class ClassDiagramGenerator {
    + ClassDiagramGenerator(writer:TextWriter, indent:string, ignoreMemberAccessibilities:Accessibilities, createAssociation:bool)
    + Generate(root:SyntaxNode) : void
    + GenerateInternal(root:SyntaxNode) : void
    + <<override>> VisitInterfaceDeclaration(node:InterfaceDeclarationSyntax) : void
    + <<override>> VisitClassDeclaration(node:ClassDeclarationSyntax) : void
    + <<override>> VisitStructDeclaration(node:StructDeclarationSyntax) : void
    + <<override>> VisitEnumDeclaration(node:EnumDeclarationSyntax) : void
    + <<override>> VisitConstructorDeclaration(node:ConstructorDeclarationSyntax) : void
    + <<override>> VisitFieldDeclaration(node:FieldDeclarationSyntax) : void
    + <<override>> VisitPropertyDeclaration(node:PropertyDeclarationSyntax) : void
    + <<override>> VisitMethodDeclaration(node:MethodDeclarationSyntax) : void
    + <<override>> VisitEnumMemberDeclaration(node:EnumMemberDeclarationSyntax) : void
    + <<override>> VisitEventFieldDeclaration(node:EventFieldDeclarationSyntax) : void
    + <<override>> VisitGenericName(node:GenericNameSyntax) : void
}
CSharpSyntaxWalker <|-- ClassDiagramGenerator
class InheritanceRelationship {
    + InheritanceRelationship(baseTypeName:TypeNameText, subTypeName:TypeNameText)
}
Relationship <|-- InheritanceRelationship
class Relationship {
    + Relationship(baseTypeName:TypeNameText, subTypeName:TypeNameText, symbol:string, baseLabel:string, subLabel:string)
    + <<override>> ToString() : string
}
class RelationshipCollection {
    + AddInheritanceFrom(syntax:TypeDeclarationSyntax) : void
    + AddInnerclassRelationFrom(node:SyntaxNode) : void
    + AddAssociationFrom(node:FieldDeclarationSyntax, field:VariableDeclaratorSyntax) : void
    + AddAssociationFrom(node:PropertyDeclarationSyntax) : void
    + GetEnumerator() : IEnumerator<Relationship>
    GetEnumerator() : IEnumerator
}
class "IEnumerable`1"<T> {
}
"IEnumerable`1" "<Relationship>" <|-- RelationshipCollection
class TypeNameText {
    + Identifier : string <<get>> <<set>>
    + TypeArguments : string <<get>> <<set>>
    + {static} From(syntax:SimpleNameSyntax) : TypeNameText
    + {static} From(syntax:GenericNameSyntax) : TypeNameText
    + {static} From(syntax:BaseTypeDeclarationSyntax) : TypeNameText
}
class ClassDiagramGeneratorTest {
    + GenerateTest_All() : void
    + GenerateTest_Public() : void
    + GenerateTest_WithoutPrivate() : void
    + GenerateTest_GenericsTypes() : void
    + NullableTest_NullableTypes() : void
}
class GenericsType {
    + Value : object <<get>>
}
class "GenericsType`1"<T> {
    + Value : T <<get>>
}
class "GenericsType`2"<T1,T2> {
    + Value1 : T1 <<get>>
    + Value2 : T2
}
class SubClass {
    + Value1 : string <<get>>
    + Value2 : int
}
class "SubClass`1"<T> {
    + Value2 : T <<get>>
}
class SubClassX {
}
class "BaseClass`1"<Tx> {
    + X : Tx <<get>> <<set>>
}
class GenericsType <<partial>> {
    + Number : int <<get>> <<set>>
}
"GenericsType`2" "<string,int>" <|-- SubClass
"GenericsType`2" "<GenericsType<int>,T>" <|-- "SubClass`1"
"SubClass`1" --> "Value1<int>" "GenericsType`1"
"BaseClass`1" "<int>" <|-- SubClassX
SubClassX --> "Gt" GenericsType
class ClassA {
    + PropD : string <<get>>
    + ClassA()
    {static} ClassA()
    + <<override>> ToString() : string
    + {static} StaticMethod() : string
    + ExpressonBodiedMethod(x:int) : void
}
abstract class ClassB {
    + {abstract} PropA : int <<get>> <<protected set>>
    + {abstract} AbstractMethod(arg1:int, arg2:double) : string
}
class ClassC <<sealed>> {
    + <<override>> PropA : int <<get>> <<protected set>> = 100
    +  <<event>> PropertyChanged : PropertyChangedEventHandler 
    + <<override>> AbstractMethod(arg1:int, arg2:double) : string
}
class Vector <<struct>> {
    + X : double <<get>>
    + Y : double <<get>>
    + Z : double <<get>>
    + Vector(x:double, y:double, z:double)
    + Vector(source:Vector)
}
enum EnumA {
    AA= 0x0001,
    BB= 0x0002,
    CC= 0x0004,
    DD= 0x0008,
    EE= 0x0010,
}
class NestedClass {
    + A : int <<get>>
}
class "IList`1"<T> {
}
class InnerClass {
    + X : string <<get>> = "xx"
    + MethodX() : void
}
class InnerStruct <<struct>> {
    + A : int <<get>>
    + InnerStruct(a:int)
}
ClassB --> "publicA" ClassA
ClassB o-> "listOfA<ClassA>" "IList`1"
ClassB <|-- ClassC
INotifyPropertyChanged <|-- ClassC
ClassC --> "PropB" ClassB
NestedClass --> "B" InnerClass
NestedClass +-- InnerClass
InnerClass +-- InnerStruct
class NullableType1 {
    + NullableLong : long?
}
class GenericsType {
    + Value : object <<get>>
}
class "GenericsType`1"<T> {
    + Value : T <<get>>
}
class "GenericsType`2"<T1,T2> {
    + Value1 : T1 <<get>>
    + Value2 : T2
}
class SubClass {
    + Value1 : string <<get>>
    + Value2 : int
}
class "SubClass`1"<T> {
    + Value2 : T <<get>>
}
class SubClassX {
}
class "BaseClass`1"<Tx> {
    + X : Tx <<get>> <<set>>
}
class GenericsType <<partial>> {
    + Number : int <<get>> <<set>>
}
"GenericsType`2" "<string,int>" <|-- SubClass
"GenericsType`2" "<GenericsType<int>,T>" <|-- "SubClass`1"
"SubClass`1" --> "Value1<int>" "GenericsType`1"
"BaseClass`1" "<int>" <|-- SubClassX
SubClassX --> "Gt" GenericsType
class ClassA {
    + PropD : string <<get>>
    + ClassA()
    {static} ClassA()
    + <<override>> ToString() : string
    + {static} StaticMethod() : string
    + ExpressonBodiedMethod(x:int) : void
}
abstract class ClassB {
    + {abstract} PropA : int <<get>> <<protected set>>
    + {abstract} AbstractMethod(arg1:int, arg2:double) : string
}
class ClassC <<sealed>> {
    + <<override>> PropA : int <<get>> <<protected set>> = 100
    +  <<event>> PropertyChanged : PropertyChangedEventHandler 
    + <<override>> AbstractMethod(arg1:int, arg2:double) : string
}
class Vector <<struct>> {
    + X : double <<get>>
    + Y : double <<get>>
    + Z : double <<get>>
    + Vector(x:double, y:double, z:double)
    + Vector(source:Vector)
}
enum EnumA {
    AA= 0x0001,
    BB= 0x0002,
    CC= 0x0004,
    DD= 0x0008,
    EE= 0x0010,
}
class NestedClass {
    + A : int <<get>>
}
class "IList`1"<T> {
}
class InnerClass {
    + X : string <<get>> = "xx"
    + MethodX() : void
}
class InnerStruct <<struct>> {
    + A : int <<get>>
    + InnerStruct(a:int)
}
ClassB --> "publicA" ClassA
ClassB o-> "listOfA<ClassA>" "IList`1"
ClassB <|-- ClassC
INotifyPropertyChanged <|-- ClassC
ClassC --> "PropB" ClassB
NestedClass --> "B" InnerClass
NestedClass +-- InnerClass
InnerClass +-- InnerStruct
class NullableType1 {
    + NullableLong : long?
}
class GenericsType {
    + Value : object <<get>>
}
class "GenericsType`1"<T> {
    + Value : T <<get>>
}
class "GenericsType`2"<T1,T2> {
    + Value1 : T1 <<get>>
    + Value2 : T2
}
class SubClass {
    + Value1 : string <<get>>
    + Value2 : int
}
class "SubClass`1"<T> {
    + Value2 : T <<get>>
}
class SubClassX {
}
class "BaseClass`1"<Tx> {
    + X : Tx <<get>> <<set>>
}
class GenericsType <<partial>> {
    + Number : int <<get>> <<set>>
}
"GenericsType`2" "<string,int>" <|-- SubClass
"GenericsType`2" "<GenericsType<int>,T>" <|-- "SubClass`1"
"SubClass`1" --> "Value1<int>" "GenericsType`1"
"BaseClass`1" "<int>" <|-- SubClassX
SubClassX --> "Gt" GenericsType
class ClassA {
    + PropD : string <<get>>
    + ClassA()
    {static} ClassA()
    + <<override>> ToString() : string
    + {static} StaticMethod() : string
    + ExpressonBodiedMethod(x:int) : void
}
abstract class ClassB {
    + {abstract} PropA : int <<get>> <<protected set>>
    + {abstract} AbstractMethod(arg1:int, arg2:double) : string
}
class ClassC <<sealed>> {
    + <<override>> PropA : int <<get>> <<protected set>> = 100
    +  <<event>> PropertyChanged : PropertyChangedEventHandler 
    + <<override>> AbstractMethod(arg1:int, arg2:double) : string
}
class Vector <<struct>> {
    + X : double <<get>>
    + Y : double <<get>>
    + Z : double <<get>>
    + Vector(x:double, y:double, z:double)
    + Vector(source:Vector)
}
enum EnumA {
    AA= 0x0001,
    BB= 0x0002,
    CC= 0x0004,
    DD= 0x0008,
    EE= 0x0010,
}
class NestedClass {
    + A : int <<get>>
}
class "IList`1"<T> {
}
class InnerClass {
    + X : string <<get>> = "xx"
    + MethodX() : void
}
class InnerStruct <<struct>> {
    + A : int <<get>>
    + InnerStruct(a:int)
}
ClassB --> "publicA" ClassA
ClassB o-> "listOfA<ClassA>" "IList`1"
ClassB <|-- ClassC
INotifyPropertyChanged <|-- ClassC
ClassC --> "PropB" ClassB
NestedClass --> "B" InnerClass
NestedClass +-- InnerClass
InnerClass +-- InnerStruct
class NullableType1 {
    + NullableLong : long?
}
@enduml
